
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a2  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000087b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000095  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000005c  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000004a  00000000  00000000  000009bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000009c  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000024  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main (void)
{
	DDRC |= (1 << 0); // Set LED as output
  6c:	a0 9a       	sbi	0x14, 0	; 20
	DDRB = 0x0;
  6e:	17 ba       	out	0x17, r1	; 23
	TCCR0 |= (1<<CS02) | (1<<CS00); // Set up timer
  70:	83 b7       	in	r24, 0x33	; 51
  72:	85 60       	ori	r24, 0x05	; 5
  74:	83 bf       	out	0x33, r24	; 51
	int iloscPrzerwan = 0;
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
			if(iloscPrzerwan == 76)
			{
				PORTC ^= (1<<0);	
			}else
			{
				PORTC ^= (1>>0);	
  7a:	31 e0       	ldi	r19, 0x01	; 1
	TCCR0 |= (1<<CS02) | (1<<CS00); // Set up timer
	int iloscPrzerwan = 0;
	for (;;)
	{
			// Check timer value in if statement, true when count matches 1/20 of a second
			if (TCNT0 >= 224)
  7c:	22 b7       	in	r18, 0x32	; 50
  7e:	20 3e       	cpi	r18, 0xE0	; 224
  80:	18 f0       	brcs	.+6      	; 0x88 <main+0x1c>
			{
				//PORTC ^= (1 << 0); // Toggle the LED
				TCNT1 = 0; // Reset timer value
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
			iloscPrzerwan++;
  86:	01 96       	adiw	r24, 0x01	; 1
			}
			if(iloscPrzerwan == 76)
  88:	8c 34       	cpi	r24, 0x4C	; 76
  8a:	91 05       	cpc	r25, r1
  8c:	21 f4       	brne	.+8      	; 0x96 <main+0x2a>
			{
				PORTC ^= (1<<0);	
  8e:	25 b3       	in	r18, 0x15	; 21
  90:	23 27       	eor	r18, r19
  92:	25 bb       	out	0x15, r18	; 21
  94:	f3 cf       	rjmp	.-26     	; 0x7c <main+0x10>
			}else
			{
				PORTC ^= (1>>0);	
  96:	25 b3       	in	r18, 0x15	; 21
  98:	23 27       	eor	r18, r19
  9a:	25 bb       	out	0x15, r18	; 21
  9c:	ef cf       	rjmp	.-34     	; 0x7c <main+0x10>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
