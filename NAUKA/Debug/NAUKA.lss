
NAUKA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000024f  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000017a  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000185  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014a  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_ZN3LED5blinkERiic>:
namespace LED
{
	

void blink(int &bitMask, int howMuchBlink, char willStop)
{
  6c:	fc 01       	movw	r30, r24
	int actualBlink = 0;
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	30 e0       	ldi	r19, 0x00	; 0
		PORTC = (bitMask<<1); //0b00000010;
		_delay_ms(1000);
		actualBlink++;
		if(actualBlink == tempHowMuchBlink)
		{
			if(willStop == 'Y' || willStop == 'y')
  72:	56 2f       	mov	r21, r22
  74:	97 2f       	mov	r25, r23
  76:	02 c0       	rjmp	.+4      	; 0x7c <_ZN3LED5blinkERiic+0x10>
  78:	25 2f       	mov	r18, r21
  7a:	39 2f       	mov	r19, r25
{
	int actualBlink = 0;
	int tempHowMuchBlink = howMuchBlink;
		while(true)
		{
		PORTC = bitMask; //0b00000001;
  7c:	80 81       	ld	r24, Z
  7e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	ad e0       	ldi	r26, 0x0D	; 13
  84:	b3 e0       	ldi	r27, 0x03	; 3
  86:	81 50       	subi	r24, 0x01	; 1
  88:	a0 40       	sbci	r26, 0x00	; 0
  8a:	b0 40       	sbci	r27, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <_ZN3LED5blinkERiic+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_ZN3LED5blinkERiic+0x24>
  90:	00 00       	nop
		_delay_ms(1000);
		PORTC = (bitMask<<1); //0b00000010;
  92:	80 81       	ld	r24, Z
  94:	88 0f       	add	r24, r24
  96:	85 bb       	out	0x15, r24	; 21
  98:	8f e3       	ldi	r24, 0x3F	; 63
  9a:	ad e0       	ldi	r26, 0x0D	; 13
  9c:	b3 e0       	ldi	r27, 0x03	; 3
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	a0 40       	sbci	r26, 0x00	; 0
  a2:	b0 40       	sbci	r27, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <_ZN3LED5blinkERiic+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN3LED5blinkERiic+0x3c>
  a8:	00 00       	nop
		_delay_ms(1000);
		actualBlink++;
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
		if(actualBlink == tempHowMuchBlink)
  ae:	62 17       	cp	r22, r18
  b0:	73 07       	cpc	r23, r19
  b2:	21 f7       	brne	.-56     	; 0x7c <_ZN3LED5blinkERiic+0x10>
		{
			if(willStop == 'Y' || willStop == 'y')
  b4:	49 35       	cpi	r20, 0x59	; 89
  b6:	11 f0       	breq	.+4      	; 0xbc <_ZN3LED5blinkERiic+0x50>
  b8:	49 37       	cpi	r20, 0x79	; 121
  ba:	f1 f6       	brne	.-68     	; 0x78 <_ZN3LED5blinkERiic+0xc>
			{
				while (1)
				{
					PORTC = 0x0;
  bc:	15 ba       	out	0x15, r1	; 21
  be:	fe cf       	rjmp	.-4      	; 0xbc <_ZN3LED5blinkERiic+0x50>

000000c0 <main>:
 */

#include "LED.h"

int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0x6>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	int dataC = 0b11111111;
	int bitmask = 0b00000001;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	89 83       	std	Y+1, r24	; 0x01
	DDRC = dataC;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 bb       	out	0x14, r24	; 20
    while(1)
    {
		
	
		LED::blink(bitmask, 6, 'Y');
  d6:	49 e5       	ldi	r20, 0x59	; 89
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	ce 01       	movw	r24, r28
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <_ZN3LED5blinkERiic>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
