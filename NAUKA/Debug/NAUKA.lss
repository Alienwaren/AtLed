
NAUKA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000390  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000b67  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000479  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ac  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000014c  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000157  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "RedLed.h"
int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	1f 92       	push	r1
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
	
	RedLed redLed1;
  7a:	ce 01       	movw	r24, r28
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN6RedLedC1Ev>
	redLed1.init(6,'C');
  82:	43 e4       	ldi	r20, 0x43	; 67
  84:	66 e0       	ldi	r22, 0x06	; 6
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	ce 01       	movw	r24, r28
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN6RedLed4initEic>
	//DDRC = 0x40;
    while(1)
    {
		//PORTC = 0x40;
		redLed1.lightLed();
  90:	ce 01       	movw	r24, r28
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN6RedLed8lightLedEv>
  98:	fb cf       	rjmp	.-10     	; 0x90 <main+0x24>

0000009a <_ZN6RedLedC1Ev>:


#include "RedLed.h"

// default constructor
RedLed::RedLed()
  9a:	fc 01       	movw	r30, r24
	:
		MledState(0), MpinNumber(0), MportLetter('0')
  9c:	11 82       	std	Z+1, r1	; 0x01
  9e:	10 82       	st	Z, r1
  a0:	13 82       	std	Z+3, r1	; 0x03
  a2:	12 82       	std	Z+2, r1	; 0x02
  a4:	80 e3       	ldi	r24, 0x30	; 48
  a6:	84 83       	std	Z+4, r24	; 0x04
  a8:	08 95       	ret

000000aa <_ZN6RedLed4initEic>:
{
} //RedLed
void RedLed::init(int pinNumber, char portLetter)
{
  aa:	fc 01       	movw	r30, r24
	MpinNumber = pinNumber;
  ac:	73 83       	std	Z+3, r23	; 0x03
  ae:	62 83       	std	Z+2, r22	; 0x02
	MportLetter = portLetter;
  b0:	44 83       	std	Z+4, r20	; 0x04
	//inicjacja pinu na wyjœcie
	switch (MportLetter)
  b2:	44 34       	cpi	r20, 0x44	; 68
  b4:	09 f4       	brne	.+2      	; 0xb8 <_ZN6RedLed4initEic+0xe>
  b6:	50 c0       	rjmp	.+160    	; 0x158 <_ZN6RedLed4initEic+0xae>
  b8:	38 f4       	brcc	.+14     	; 0xc8 <_ZN6RedLed4initEic+0x1e>
  ba:	42 34       	cpi	r20, 0x42	; 66
  bc:	39 f1       	breq	.+78     	; 0x10c <_ZN6RedLed4initEic+0x62>
  be:	c8 f5       	brcc	.+114    	; 0x132 <_ZN6RedLed4initEic+0x88>
  c0:	41 34       	cpi	r20, 0x41	; 65
  c2:	09 f0       	breq	.+2      	; 0xc6 <_ZN6RedLed4initEic+0x1c>
  c4:	a7 c0       	rjmp	.+334    	; 0x214 <_ZN6RedLed4initEic+0x16a>
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <_ZN6RedLed4initEic+0x3c>
  c8:	42 36       	cpi	r20, 0x62	; 98
  ca:	09 f4       	brne	.+2      	; 0xce <_ZN6RedLed4initEic+0x24>
  cc:	6b c0       	rjmp	.+214    	; 0x1a4 <_ZN6RedLed4initEic+0xfa>
  ce:	20 f4       	brcc	.+8      	; 0xd8 <_ZN6RedLed4initEic+0x2e>
  d0:	41 36       	cpi	r20, 0x61	; 97
  d2:	09 f0       	breq	.+2      	; 0xd6 <_ZN6RedLed4initEic+0x2c>
  d4:	9f c0       	rjmp	.+318    	; 0x214 <_ZN6RedLed4initEic+0x16a>
  d6:	53 c0       	rjmp	.+166    	; 0x17e <_ZN6RedLed4initEic+0xd4>
  d8:	43 36       	cpi	r20, 0x63	; 99
  da:	09 f4       	brne	.+2      	; 0xde <_ZN6RedLed4initEic+0x34>
  dc:	76 c0       	rjmp	.+236    	; 0x1ca <_ZN6RedLed4initEic+0x120>
  de:	44 36       	cpi	r20, 0x64	; 100
  e0:	09 f0       	breq	.+2      	; 0xe4 <_ZN6RedLed4initEic+0x3a>
  e2:	98 c0       	rjmp	.+304    	; 0x214 <_ZN6RedLed4initEic+0x16a>
  e4:	85 c0       	rjmp	.+266    	; 0x1f0 <_ZN6RedLed4initEic+0x146>
	{
		case 'A':
			if(MpinNumber = 1)
			{
				DDRA = 0x1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 2)
			{
				DDRA = 0x2;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 3)
			{
				DDRA = 0x4;
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 4)
			{
				DDRA = 0x8;
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 5)
			{
				DDRA = 0x10;
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 6)
			{
				DDRA = 0x20;
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 7)
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	93 83       	std	Z+3, r25	; 0x03
 104:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRA = 0x40;
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	8a bb       	out	0x1a, r24	; 26
 10a:	08 95       	ret
			}
		break;
		case 'B':
			if(MpinNumber = 1)
			{
				DDRB = 0x1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 2)
			{
				DDRB = 0x2;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 3)
			{
				DDRB = 0x4;
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 4)
			{
				DDRB = 0x8;
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 5)
			{
				DDRB = 0x10;
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 6)
			{
				DDRB = 0x20;
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 7)
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	93 83       	std	Z+3, r25	; 0x03
 12a:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRB = 0x40;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
			}
		break;
		case 'C':
			if(MpinNumber = 1)
			{
				DDRC = 0x1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 2)
			{
				DDRC = 0x2;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 3)
			{
				DDRC = 0x4;
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 4)
			{
				DDRC = 0x8;
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 5)
			{
				DDRC = 0x10;
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 6)
			{
				DDRC = 0x20;
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 7)
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	93 83       	std	Z+3, r25	; 0x03
 150:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRC = 0x40;
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
			}
		break;
		case 'D':
			if(MpinNumber = 1)
			{
				DDRD = 0x1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 2)
			{
				DDRD = 0x2;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 3)
			{
				DDRD = 0x4;
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 4)
			{
				DDRD = 0x8;
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 5)
			{
				DDRD = 0x10;
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 6)
			{
				DDRD = 0x20;
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 7)
 170:	87 e0       	ldi	r24, 0x07	; 7
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	93 83       	std	Z+3, r25	; 0x03
 176:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRD = 0x40;
 178:	80 e4       	ldi	r24, 0x40	; 64
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
		break;
		
		case 'a':
			if(MpinNumber = 1)
			{
				DDRA = 0x1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 2)
			{
				DDRA = 0x2;
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 3)
			{
				DDRA = 0x4;
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 4)
			{
				DDRA = 0x8;
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 5)
			{
				DDRA = 0x10;
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 6)
			{
				DDRA = 0x20;
 192:	80 e2       	ldi	r24, 0x20	; 32
 194:	8a bb       	out	0x1a, r24	; 26
			}
			if(MpinNumber = 7)
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	93 83       	std	Z+3, r25	; 0x03
 19c:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRA = 0x40;
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	08 95       	ret
			}
		break;
		case 'b':
			if(MpinNumber = 1)
			{
				DDRB = 0x1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 2)
			{
				DDRB = 0x2;
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 3)
			{
				DDRB = 0x4;
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 4)
			{
				DDRB = 0x8;
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 5)
			{
				DDRB = 0x10;
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 6)
			{
				DDRB = 0x20;
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	87 bb       	out	0x17, r24	; 23
			}
			if(MpinNumber = 7)
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	93 83       	std	Z+3, r25	; 0x03
 1c2:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRB = 0x40;
 1c4:	80 e4       	ldi	r24, 0x40	; 64
 1c6:	87 bb       	out	0x17, r24	; 23
 1c8:	08 95       	ret
			}	
		break;
		case 'c':
			if(MpinNumber = 1)
			{
				DDRC = 0x1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 2)
			{
				DDRC = 0x2;
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 3)
			{
				DDRC = 0x4;
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 4)
			{
				DDRC = 0x8;
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 5)
			{
				DDRC = 0x10;
 1da:	80 e1       	ldi	r24, 0x10	; 16
 1dc:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 6)
			{
				DDRC = 0x40;
 1de:	80 e4       	ldi	r24, 0x40	; 64
 1e0:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 7)
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	93 83       	std	Z+3, r25	; 0x03
 1e8:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRC = 0x80;
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
			}	
		break;
		case 'd':
			if(MpinNumber = 1)
			{
				DDRD = 0x1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 2)
			{
				DDRD = 0x2;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 3)
			{
				DDRD = 0x4;
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 4)
			{
				DDRD = 0x8;
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 5)
			{
				DDRD = 0x10;
 200:	80 e1       	ldi	r24, 0x10	; 16
 202:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 6)
			{
				DDRD = 0x20;
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	81 bb       	out	0x11, r24	; 17
			}
			if(MpinNumber = 7)
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	93 83       	std	Z+3, r25	; 0x03
 20e:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRD = 0x40;
 210:	80 e4       	ldi	r24, 0x40	; 64
 212:	81 bb       	out	0x11, r24	; 17
 214:	08 95       	ret

00000216 <_ZN6RedLed8lightLedEv>:

	}
}
void RedLed::lightLed()
{
		switch (MportLetter)
 216:	fc 01       	movw	r30, r24
 218:	24 81       	ldd	r18, Z+4	; 0x04
 21a:	24 34       	cpi	r18, 0x44	; 68
 21c:	09 f4       	brne	.+2      	; 0x220 <_ZN6RedLed8lightLedEv+0xa>
 21e:	52 c0       	rjmp	.+164    	; 0x2c4 <_ZN6RedLed8lightLedEv+0xae>
 220:	38 f4       	brcc	.+14     	; 0x230 <_ZN6RedLed8lightLedEv+0x1a>
 222:	22 34       	cpi	r18, 0x42	; 66
 224:	41 f1       	breq	.+80     	; 0x276 <_ZN6RedLed8lightLedEv+0x60>
 226:	d8 f5       	brcc	.+118    	; 0x29e <_ZN6RedLed8lightLedEv+0x88>
 228:	21 34       	cpi	r18, 0x41	; 65
 22a:	09 f0       	breq	.+2      	; 0x22e <_ZN6RedLed8lightLedEv+0x18>
 22c:	ae c0       	rjmp	.+348    	; 0x38a <_ZN6RedLed8lightLedEv+0x174>
 22e:	0f c0       	rjmp	.+30     	; 0x24e <_ZN6RedLed8lightLedEv+0x38>
 230:	22 36       	cpi	r18, 0x62	; 98
 232:	09 f4       	brne	.+2      	; 0x236 <_ZN6RedLed8lightLedEv+0x20>
 234:	6f c0       	rjmp	.+222    	; 0x314 <_ZN6RedLed8lightLedEv+0xfe>
 236:	20 f4       	brcc	.+8      	; 0x240 <_ZN6RedLed8lightLedEv+0x2a>
 238:	21 36       	cpi	r18, 0x61	; 97
 23a:	09 f0       	breq	.+2      	; 0x23e <_ZN6RedLed8lightLedEv+0x28>
 23c:	a6 c0       	rjmp	.+332    	; 0x38a <_ZN6RedLed8lightLedEv+0x174>
 23e:	56 c0       	rjmp	.+172    	; 0x2ec <_ZN6RedLed8lightLedEv+0xd6>
 240:	23 36       	cpi	r18, 0x63	; 99
 242:	09 f4       	brne	.+2      	; 0x246 <_ZN6RedLed8lightLedEv+0x30>
 244:	7b c0       	rjmp	.+246    	; 0x33c <_ZN6RedLed8lightLedEv+0x126>
 246:	24 36       	cpi	r18, 0x64	; 100
 248:	09 f0       	breq	.+2      	; 0x24c <_ZN6RedLed8lightLedEv+0x36>
 24a:	9f c0       	rjmp	.+318    	; 0x38a <_ZN6RedLed8lightLedEv+0x174>
 24c:	8b c0       	rjmp	.+278    	; 0x364 <_ZN6RedLed8lightLedEv+0x14e>
		{
			case 'A':
			if(MpinNumber = 1)
			{
				DDRA = 0x1;
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 2)
			{
				DDRA = 0x2;
 252:	22 e0       	ldi	r18, 0x02	; 2
 254:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 3)
			{
				DDRA = 0x4;
 256:	24 e0       	ldi	r18, 0x04	; 4
 258:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 4)
			{
				DDRA = 0x8;
 25a:	28 e0       	ldi	r18, 0x08	; 8
 25c:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 5)
			{
				DDRA = 0x10;
 25e:	20 e1       	ldi	r18, 0x10	; 16
 260:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 6)
			{
				DDRA = 0x20;
 262:	20 e2       	ldi	r18, 0x20	; 32
 264:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 7)
 266:	27 e0       	ldi	r18, 0x07	; 7
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	33 83       	std	Z+3, r19	; 0x03
 26e:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRA = 0x40;
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	8a bb       	out	0x1a, r24	; 26
 274:	08 95       	ret
			}
			break;
			case 'B':
			if(MpinNumber = 1)
			{
				DDRB = 0x1;
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 2)
			{
				DDRB = 0x2;
 27a:	22 e0       	ldi	r18, 0x02	; 2
 27c:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 3)
			{
				DDRB = 0x4;
 27e:	24 e0       	ldi	r18, 0x04	; 4
 280:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 4)
			{
				DDRB = 0x8;
 282:	28 e0       	ldi	r18, 0x08	; 8
 284:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 5)
			{
				DDRB = 0x10;
 286:	20 e1       	ldi	r18, 0x10	; 16
 288:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 6)
			{
				DDRB = 0x20;
 28a:	20 e2       	ldi	r18, 0x20	; 32
 28c:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 7)
 28e:	27 e0       	ldi	r18, 0x07	; 7
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	33 83       	std	Z+3, r19	; 0x03
 296:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRB = 0x40;
 298:	80 e4       	ldi	r24, 0x40	; 64
 29a:	87 bb       	out	0x17, r24	; 23
 29c:	08 95       	ret
			}
			break;
			case 'C':
			if(MpinNumber = 1)
			{
				DDRC = 0x1;
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 2)
			{
				DDRC = 0x2;
 2a2:	22 e0       	ldi	r18, 0x02	; 2
 2a4:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 3)
			{
				DDRC = 0x4;
 2a6:	24 e0       	ldi	r18, 0x04	; 4
 2a8:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 4)
			{
				DDRC = 0x8;
 2aa:	28 e0       	ldi	r18, 0x08	; 8
 2ac:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 5)
			{
				DDRC = 0x10;
 2ae:	20 e1       	ldi	r18, 0x10	; 16
 2b0:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 6)
			{
				PORTC = 0x40;
 2b2:	40 e4       	ldi	r20, 0x40	; 64
 2b4:	45 bb       	out	0x15, r20	; 21
			}
			if(MpinNumber = 7)
 2b6:	27 e0       	ldi	r18, 0x07	; 7
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	33 83       	std	Z+3, r19	; 0x03
 2be:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRC = 0x40;
 2c0:	44 bb       	out	0x14, r20	; 20
 2c2:	08 95       	ret
			}
			break;
			case 'D':
			if(MpinNumber = 1)
			{
				DDRD = 0x1;
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 2)
			{
				DDRD = 0x2;
 2c8:	22 e0       	ldi	r18, 0x02	; 2
 2ca:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 3)
			{
				DDRD = 0x4;
 2cc:	24 e0       	ldi	r18, 0x04	; 4
 2ce:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 4)
			{
				DDRD = 0x8;
 2d0:	28 e0       	ldi	r18, 0x08	; 8
 2d2:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 5)
			{
				DDRD = 0x10;
 2d4:	20 e1       	ldi	r18, 0x10	; 16
 2d6:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 6)
			{
				DDRD = 0x20;
 2d8:	20 e2       	ldi	r18, 0x20	; 32
 2da:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 7)
 2dc:	27 e0       	ldi	r18, 0x07	; 7
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	33 83       	std	Z+3, r19	; 0x03
 2e4:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRD = 0x40;
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	81 bb       	out	0x11, r24	; 17
 2ea:	08 95       	ret
			break;
			
			case 'a':
			if(MpinNumber = 1)
			{
				DDRA = 0x1;
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 2)
			{
				DDRA = 0x2;
 2f0:	22 e0       	ldi	r18, 0x02	; 2
 2f2:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 3)
			{
				DDRA = 0x4;
 2f4:	24 e0       	ldi	r18, 0x04	; 4
 2f6:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 4)
			{
				DDRA = 0x8;
 2f8:	28 e0       	ldi	r18, 0x08	; 8
 2fa:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 5)
			{
				DDRA = 0x10;
 2fc:	20 e1       	ldi	r18, 0x10	; 16
 2fe:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 6)
			{
				DDRA = 0x20;
 300:	20 e2       	ldi	r18, 0x20	; 32
 302:	2a bb       	out	0x1a, r18	; 26
			}
			if(MpinNumber = 7)
 304:	27 e0       	ldi	r18, 0x07	; 7
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	33 83       	std	Z+3, r19	; 0x03
 30c:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRA = 0x40;
 30e:	80 e4       	ldi	r24, 0x40	; 64
 310:	8a bb       	out	0x1a, r24	; 26
 312:	08 95       	ret
			}
			break;
			case 'b':
			if(MpinNumber = 1)
			{
				DDRB = 0x1;
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 2)
			{
				DDRB = 0x2;
 318:	22 e0       	ldi	r18, 0x02	; 2
 31a:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 3)
			{
				DDRB = 0x4;
 31c:	24 e0       	ldi	r18, 0x04	; 4
 31e:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 4)
			{
				DDRB = 0x8;
 320:	28 e0       	ldi	r18, 0x08	; 8
 322:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 5)
			{
				DDRB = 0x10;
 324:	20 e1       	ldi	r18, 0x10	; 16
 326:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 6)
			{
				DDRB = 0x20;
 328:	20 e2       	ldi	r18, 0x20	; 32
 32a:	27 bb       	out	0x17, r18	; 23
			}
			if(MpinNumber = 7)
 32c:	27 e0       	ldi	r18, 0x07	; 7
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	33 83       	std	Z+3, r19	; 0x03
 334:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRB = 0x40;
 336:	80 e4       	ldi	r24, 0x40	; 64
 338:	87 bb       	out	0x17, r24	; 23
 33a:	08 95       	ret
			}
			break;
			case 'c':
			if(MpinNumber = 1)
			{
				DDRC = 0x1;
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 2)
			{
				DDRC = 0x2;
 340:	22 e0       	ldi	r18, 0x02	; 2
 342:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 3)
			{
				DDRC = 0x4;
 344:	24 e0       	ldi	r18, 0x04	; 4
 346:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 4)
			{
				DDRC = 0x8;
 348:	28 e0       	ldi	r18, 0x08	; 8
 34a:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 5)
			{
				DDRC = 0x10;
 34c:	20 e1       	ldi	r18, 0x10	; 16
 34e:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 6)
			{
				DDRC = 0x20;
 350:	20 e2       	ldi	r18, 0x20	; 32
 352:	24 bb       	out	0x14, r18	; 20
			}
			if(MpinNumber = 7)
 354:	27 e0       	ldi	r18, 0x07	; 7
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	33 83       	std	Z+3, r19	; 0x03
 35c:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRC = 0x40;
 35e:	80 e4       	ldi	r24, 0x40	; 64
 360:	84 bb       	out	0x14, r24	; 20
 362:	08 95       	ret
			}
			break;
			case 'd':
			if(MpinNumber = 1)
			{
				DDRD = 0x1;
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 2)
			{
				DDRD = 0x2;
 368:	22 e0       	ldi	r18, 0x02	; 2
 36a:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 3)
			{
				DDRD = 0x4;
 36c:	24 e0       	ldi	r18, 0x04	; 4
 36e:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 4)
			{
				DDRD = 0x8;
 370:	28 e0       	ldi	r18, 0x08	; 8
 372:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 5)
			{
				DDRD = 0x10;
 374:	20 e1       	ldi	r18, 0x10	; 16
 376:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 6)
			{
				DDRD = 0x20;
 378:	20 e2       	ldi	r18, 0x20	; 32
 37a:	21 bb       	out	0x11, r18	; 17
			}
			if(MpinNumber = 7)
 37c:	27 e0       	ldi	r18, 0x07	; 7
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	33 83       	std	Z+3, r19	; 0x03
 384:	22 83       	std	Z+2, r18	; 0x02
			{
				DDRD = 0x40;
 386:	80 e4       	ldi	r24, 0x40	; 64
 388:	81 bb       	out	0x11, r24	; 17
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
