
NAUKA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ad  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000348  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025e  00000000  00000000  00001333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f7  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ab  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void ALedPattern::setEndBlink(char PwillEnd)
{
	PwillEnd = willEnd;
}
void ALedPattern::setParams(int setBitMask, int setAmountBlink, char setWillEndLet)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	setStartingBitMask(setBitMask);
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	setAmountOfBlink(setAmountBlink);
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	setEndBlink(setWillEndLet);
	
}
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_ZN3LED11blinkNormalEiic>:
}

void blinkNormal(int bitMask, int howMuchBlink, char willStop)
{
	int actualBlink = 0;
	PORTC = bitMask;
  6c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	2f e3       	ldi	r18, 0x3F	; 63
  70:	8d e0       	ldi	r24, 0x0D	; 13
  72:	93 e0       	ldi	r25, 0x03	; 3
  74:	21 50       	subi	r18, 0x01	; 1
  76:	80 40       	sbci	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <_ZN3LED11blinkNormalEiic+0x8>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZN3LED11blinkNormalEiic+0x12>
  7e:	00 00       	nop
	_delay_ms(1000);
	PORTC = PORTC | 1;
  80:	a8 9a       	sbi	0x15, 0	; 21
  82:	2f e3       	ldi	r18, 0x3F	; 63
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <_ZN3LED11blinkNormalEiic+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN3LED11blinkNormalEiic+0x26>
  92:	00 00       	nop
	_delay_ms(1000);
	actualBlink++;
	while(true)
	{
			if(actualBlink == howMuchBlink)
  94:	61 30       	cpi	r22, 0x01	; 1
  96:	71 05       	cpc	r23, r1
  98:	31 f4       	brne	.+12     	; 0xa6 <_ZN3LED11blinkNormalEiic+0x3a>
			{
				if(willStop == 'Y' || willStop == 'y')
  9a:	49 35       	cpi	r20, 0x59	; 89
  9c:	11 f0       	breq	.+4      	; 0xa2 <_ZN3LED11blinkNormalEiic+0x36>
  9e:	49 37       	cpi	r20, 0x79	; 121
  a0:	c9 f7       	brne	.-14     	; 0x94 <_ZN3LED11blinkNormalEiic+0x28>
				{
					while (1)
					{
						PORTC = 0x0;
  a2:	15 ba       	out	0x15, r1	; 21
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <_ZN3LED11blinkNormalEiic+0x36>
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <_ZN3LED11blinkNormalEiic+0x3a>

000000a8 <main>:
#include "LED.h"
int main(void)
{
	int dataC = 0b11111111;
	int bitmask = 0b00000001;
	DDRC = dataC;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	
    while(1)
    {
		//LED::blink(bitmask, 2, 'n');
		//_delay_ms(1000);
		LED::blinkNormal(bitmask, 2, 'y');
  ac:	49 e7       	ldi	r20, 0x79	; 121
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <_ZN3LED11blinkNormalEiic>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
