
NAUKA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000010a  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000045e  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000276  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ed  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000157  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
*/
#include <avr/io.h>
#include <util/delay.h>
#include "RedLed.h"
int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	1f 92       	push	r1
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
	
	RedLed redLed1;
  7a:	ce 01       	movw	r24, r28
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	0e 94 4c 00 	call	0x98	; 0x98 <_ZN6RedLedC1Ev>
	redLed1.init(6,'C');
  82:	43 e4       	ldi	r20, 0x43	; 67
  84:	66 e0       	ldi	r22, 0x06	; 6
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	ce 01       	movw	r24, r28
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN6RedLed4initEic>
	DDRC = 0x40;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	84 bb       	out	0x14, r24	; 20
    while(1)
    {
		PORTC = 0x40;
  94:	85 bb       	out	0x15, r24	; 21
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x28>

00000098 <_ZN6RedLedC1Ev>:


#include "RedLed.h"

// default constructor
RedLed::RedLed()
  98:	fc 01       	movw	r30, r24
	:
		MledState(0), MpinNumber(0), MportLetter('0')
  9a:	11 82       	std	Z+1, r1	; 0x01
  9c:	10 82       	st	Z, r1
  9e:	13 82       	std	Z+3, r1	; 0x03
  a0:	12 82       	std	Z+2, r1	; 0x02
  a2:	80 e3       	ldi	r24, 0x30	; 48
  a4:	84 83       	std	Z+4, r24	; 0x04
  a6:	08 95       	ret

000000a8 <_ZN6RedLed4initEic>:
{
} //RedLed
void RedLed::init(int pinNumber, char portLetter)
{
  a8:	fc 01       	movw	r30, r24
	MpinNumber = pinNumber;
  aa:	73 83       	std	Z+3, r23	; 0x03
  ac:	62 83       	std	Z+2, r22	; 0x02
	MportLetter = portLetter;
  ae:	44 83       	std	Z+4, r20	; 0x04
	//inicjacja pinu na wyjœcie
	switch (MportLetter)
  b0:	43 34       	cpi	r20, 0x43	; 67
  b2:	19 f0       	breq	.+6      	; 0xba <_ZN6RedLed4initEic+0x12>
  b4:	43 36       	cpi	r20, 0x63	; 99
  b6:	31 f5       	brne	.+76     	; 0x104 <_ZN6RedLed4initEic+0x5c>
  b8:	13 c0       	rjmp	.+38     	; 0xe0 <_ZN6RedLed4initEic+0x38>
	{
		case 'C':
			if(MpinNumber = 1)
			{
				DDRC = 0x1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 2)
			{
				DDRC = 0x2;
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 3)
			{
				DDRC = 0x4;
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 4)
			{
				DDRC = 0x8;
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 5)
			{
				DDRC = 0x10;
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 6)
			{
				DDRC = 0x40;
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 7)
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	93 83       	std	Z+3, r25	; 0x03
  d8:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRC = 0x80;
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	84 bb       	out	0x14, r24	; 20
  de:	08 95       	ret

	
		case 'c':
			if(MpinNumber = 1)
			{
				DDRC = 0x1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 2)
			{
				DDRC = 0x2;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 3)
			{
				DDRC = 0x4;
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 4)
			{
				DDRC = 0x8;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 5)
			{
				DDRC = 0x10;
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 6)
			{
				DDRC = 0x40;
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	84 bb       	out	0x14, r24	; 20
			}
			if(MpinNumber = 7)
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	93 83       	std	Z+3, r25	; 0x03
  fe:	82 83       	std	Z+2, r24	; 0x02
			{
				DDRC = 0x80;
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	84 bb       	out	0x14, r24	; 20
 104:	08 95       	ret

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
